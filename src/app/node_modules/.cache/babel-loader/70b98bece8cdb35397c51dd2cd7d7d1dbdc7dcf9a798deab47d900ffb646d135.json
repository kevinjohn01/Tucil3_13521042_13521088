{"ast":null,"code":"var _jsxFileName = \"/Users/putinabillaaidira/Downloads/KULIAH/Semester 4/STIMA/Tucil3_13521042_13521088/src/app/src/GraphProcessor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getEdgeColor(edges, newRouteEdge) {\n  return newRouteEdge[edges.from] && newRouteEdge[edges.from].includes(edges.to) ? \"#000000\" : \"#FF0000\";\n}\nfunction GraphProcessor(_ref) {\n  _s();\n  let {\n    weight,\n    nodenames,\n    path\n  } = _ref;\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const visJsRef = useRef(null);\n  useEffect(() => {\n    let routeEdge = [];\n    let routeEdgeId = [];\n    if (path != null) {\n      routeEdge = Array.from({\n        length: weight.length\n      }, () => []);\n      for (let i = 0; i < path.length - 1; i++) {\n        routeEdge[path[i]][path[i + 1]] = true;\n      }\n    }\n    if (weight && nodenames) {\n      const newNodes = [];\n      const newEdges = [];\n      let id = 0;\n      for (let i = 0; i < weight.length; i++) {\n        newNodes.push({\n          id: `${i}`,\n          label: nodenames[i][0]\n        });\n        for (let j = 0; j < weight[i].length; j++) {\n          if (weight[i][j] !== 0) {\n            newEdges.push({\n              id: `${id}`,\n              from: i,\n              to: j,\n              label: weight[i][j]\n            });\n            if (routeEdge[i][j] === true) routeEdgeId.push(id);\n          }\n          id++;\n        }\n      }\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [weight, nodenames]);\n  useEffect(() => {\n    const visJsRefCurrent = visJsRef.current;\n    const network = new Network(visJsRefCurrent, {\n      nodes,\n      edges\n    }, {\n      autoResize: true,\n      edges: {\n        color: {\n          color: \"black\"\n        }\n      }\n    });\n    console.log(network);\n    for (let i = 0; i < network.body.data.edges.length; i++) {\n      try {\n        network.body.data.edges.update({\n          id: `${i}` + 'isRoute',\n          color: {\n            color: \"red\"\n          }\n        });\n      } catch (err) {}\n      ;\n    }\n    return () => {\n      network.destroy();\n    };\n  }, [nodes, edges, path]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: visJsRef,\n    className: \"graph\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 11\n  }, this);\n}\n_s(GraphProcessor, \"Wst6RXIqRek9kqLwMYJBAV8VmNo=\");\n_c = GraphProcessor;\nexport default GraphProcessor;\nvar _c;\n$RefreshReg$(_c, \"GraphProcessor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Network","jsxDEV","_jsxDEV","getEdgeColor","edges","newRouteEdge","from","includes","to","GraphProcessor","_ref","_s","weight","nodenames","path","nodes","setNodes","setEdges","visJsRef","routeEdge","routeEdgeId","Array","length","i","newNodes","newEdges","id","push","label","j","visJsRefCurrent","current","network","autoResize","color","console","log","body","data","update","err","destroy","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/putinabillaaidira/Downloads/KULIAH/Semester 4/STIMA/Tucil3_13521042_13521088/src/app/src/GraphProcessor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\nimport \"./App.css\";\n\nfunction getEdgeColor(edges, newRouteEdge) {\n  return newRouteEdge[edges.from] && newRouteEdge[edges.from].includes(edges.to) ? \"#000000\" : \"#FF0000\";\n}\n\nfunction GraphProcessor({ weight, nodenames, path }) {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const visJsRef = useRef(null);\n\n  useEffect(() => {\n    let routeEdge = [];\n    let routeEdgeId = [];\n    if (path != null) {\n      routeEdge = Array.from({ length: weight.length }, () => []);\n      for (let i = 0; i < path.length - 1; i++) {\n        routeEdge[path[i]][path[i + 1]] = true;\n      }\n    }\n    if (weight && nodenames) {\n      const newNodes = [];\n      const newEdges = [];\n      let id = 0;\n      for (let i = 0; i < weight.length; i++) {\n        newNodes.push({ id: `${i}`, label: nodenames[i][0]});\n        for (let j = 0; j < weight[i].length; j++) {\n          if (weight[i][j] !== 0){\n              newEdges.push({ id: `${id}`, from: i, to: j , label: weight[i][j]});\n              if(routeEdge[i][j] === true) routeEdgeId.push(id);\n          }\n          id++;\n        }\n      }\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [weight, nodenames]);\n\n  useEffect(() => {\n    const visJsRefCurrent = visJsRef.current;\n    const network = new Network(\n      visJsRefCurrent,\n      { nodes, edges },\n      {\n        autoResize: true,\n        edges: {\n          color: {\n            color: \"black\",\n          }\n        }\n      }\n    );\n    console.log(network);\n    for(let i = 0; i < network.body.data.edges.length; i++){\n        try{network.body.data.edges.update({id: `${i}` + 'isRoute', color: {color: \"red\"}})} catch(err){};\n    }\n    return () => {\n      network.destroy();\n    };\n  }, [nodes, edges, path]);\n\n  return (<div ref={visJsRef} className=\"graph\" />);\n}\n\nexport default GraphProcessor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,YAAYA,CAACC,KAAK,EAAEC,YAAY,EAAE;EACzC,OAAOA,YAAY,CAACD,KAAK,CAACE,IAAI,CAAC,IAAID,YAAY,CAACD,KAAK,CAACE,IAAI,CAAC,CAACC,QAAQ,CAACH,KAAK,CAACI,EAAE,CAAC,GAAG,SAAS,GAAG,SAAS;AACxG;AAEA,SAASC,cAAcA,CAAAC,IAAA,EAA8B;EAAAC,EAAA;EAAA,IAA7B;IAAEC,MAAM;IAAEC,SAAS;IAAEC;EAAK,CAAC,GAAAJ,IAAA;EACjD,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,KAAK,EAAEa,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMqB,QAAQ,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAIqB,SAAS,GAAG,EAAE;IAClB,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAIN,IAAI,IAAI,IAAI,EAAE;MAChBK,SAAS,GAAGE,KAAK,CAACf,IAAI,CAAC;QAAEgB,MAAM,EAAEV,MAAM,CAACU;MAAO,CAAC,EAAE,MAAM,EAAE,CAAC;MAC3D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,IAAI,CAACQ,MAAM,GAAG,CAAC,EAAEC,CAAC,EAAE,EAAE;QACxCJ,SAAS,CAACL,IAAI,CAACS,CAAC,CAAC,CAAC,CAACT,IAAI,CAACS,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI;MACxC;IACF;IACA,IAAIX,MAAM,IAAIC,SAAS,EAAE;MACvB,MAAMW,QAAQ,GAAG,EAAE;MACnB,MAAMC,QAAQ,GAAG,EAAE;MACnB,IAAIC,EAAE,GAAG,CAAC;MACV,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,MAAM,CAACU,MAAM,EAAEC,CAAC,EAAE,EAAE;QACtCC,QAAQ,CAACG,IAAI,CAAC;UAAED,EAAE,EAAG,GAAEH,CAAE,EAAC;UAAEK,KAAK,EAAEf,SAAS,CAACU,CAAC,CAAC,CAAC,CAAC;QAAC,CAAC,CAAC;QACpD,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,MAAM,CAACW,CAAC,CAAC,CAACD,MAAM,EAAEO,CAAC,EAAE,EAAE;UACzC,IAAIjB,MAAM,CAACW,CAAC,CAAC,CAACM,CAAC,CAAC,KAAK,CAAC,EAAC;YACnBJ,QAAQ,CAACE,IAAI,CAAC;cAAED,EAAE,EAAG,GAAEA,EAAG,EAAC;cAAEpB,IAAI,EAAEiB,CAAC;cAAEf,EAAE,EAAEqB,CAAC;cAAGD,KAAK,EAAEhB,MAAM,CAACW,CAAC,CAAC,CAACM,CAAC;YAAC,CAAC,CAAC;YACnE,IAAGV,SAAS,CAACI,CAAC,CAAC,CAACM,CAAC,CAAC,KAAK,IAAI,EAAET,WAAW,CAACO,IAAI,CAACD,EAAE,CAAC;UACrD;UACAA,EAAE,EAAE;QACN;MACF;MACAV,QAAQ,CAACQ,QAAQ,CAAC;MAClBP,QAAQ,CAACQ,QAAQ,CAAC;IACpB;EACF,CAAC,EAAE,CAACb,MAAM,EAAEC,SAAS,CAAC,CAAC;EAEvBf,SAAS,CAAC,MAAM;IACd,MAAMgC,eAAe,GAAGZ,QAAQ,CAACa,OAAO;IACxC,MAAMC,OAAO,GAAG,IAAIhC,OAAO,CACzB8B,eAAe,EACf;MAAEf,KAAK;MAAEX;IAAM,CAAC,EAChB;MACE6B,UAAU,EAAE,IAAI;MAChB7B,KAAK,EAAE;QACL8B,KAAK,EAAE;UACLA,KAAK,EAAE;QACT;MACF;IACF,CAAC,CACF;IACDC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;IACpB,KAAI,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACK,IAAI,CAACC,IAAI,CAAClC,KAAK,CAACkB,MAAM,EAAEC,CAAC,EAAE,EAAC;MACnD,IAAG;QAACS,OAAO,CAACK,IAAI,CAACC,IAAI,CAAClC,KAAK,CAACmC,MAAM,CAAC;UAACb,EAAE,EAAG,GAAEH,CAAE,EAAC,GAAG,SAAS;UAAEW,KAAK,EAAE;YAACA,KAAK,EAAE;UAAK;QAAC,CAAC,CAAC;MAAA,CAAC,CAAC,OAAMM,GAAG,EAAC,CAAC;MAAC;IACrG;IACA,OAAO,MAAM;MACXR,OAAO,CAACS,OAAO,EAAE;IACnB,CAAC;EACH,CAAC,EAAE,CAAC1B,KAAK,EAAEX,KAAK,EAAEU,IAAI,CAAC,CAAC;EAExB,oBAAQZ,OAAA;IAAKwC,GAAG,EAAExB,QAAS;IAACyB,SAAS,EAAC;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AAClD;AAACpC,EAAA,CAzDQF,cAAc;AAAAuC,EAAA,GAAdvC,cAAc;AA2DvB,eAAeA,cAAc;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}