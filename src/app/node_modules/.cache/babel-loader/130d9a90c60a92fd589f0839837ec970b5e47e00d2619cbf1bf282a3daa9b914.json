{"ast":null,"code":"var _jsxFileName = \"/Users/putinabillaaidira/Downloads/KULIAH/Semester 4/STIMA/Tucil3_13521042_13521088/src/app/src/GraphProcessor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GraphProcessor(_ref) {\n  _s();\n  let {\n    weight,\n    nodenames,\n    path\n  } = _ref;\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const visJsRef = useRef(null);\n  console.log(\"path\");\n  console.log(path);\n  useEffect(() => {\n    if (weight && nodenames) {\n      const newNodes = [];\n      const newEdges = [];\n      console.log(weight.length);\n      for (let i = 0; i < weight.length; i++) {\n        newNodes.push({\n          id: i,\n          label: nodenames[i][0]\n        });\n        for (let j = 0; j < weight[i].length; j++) {\n          if (weight[i][j] !== 0) newEdges.push({\n            from: i,\n            to: j\n          });\n        }\n      }\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [weight, nodenames]);\n  const getEdgeColor = edge => {\n    if (newRouteEdge[edge.from] && newRouteEdge[edge.from].includes(edge.to)) {\n      return '#FF0000';\n    } else {\n      return '#999999';\n    }\n  };\n  useEffect(() => {\n    visJsRef.current && new Network(visJsRef.current, {\n      nodes,\n      edges\n    }, {\n      edges: {\n        color: getEdgeColor\n      }\n    });\n  }, [visJsRef, nodes, edges, newRouteEdge]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: visJsRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this);\n}\n_s(GraphProcessor, \"Wst6RXIqRek9kqLwMYJBAV8VmNo=\");\n_c = GraphProcessor;\nexport default GraphProcessor;\nvar _c;\n$RefreshReg$(_c, \"GraphProcessor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Network","jsxDEV","_jsxDEV","GraphProcessor","_ref","_s","weight","nodenames","path","nodes","setNodes","edges","setEdges","visJsRef","console","log","newNodes","newEdges","length","i","push","id","label","j","from","to","getEdgeColor","edge","newRouteEdge","includes","current","color","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/putinabillaaidira/Downloads/KULIAH/Semester 4/STIMA/Tucil3_13521042_13521088/src/app/src/GraphProcessor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\n\nfunction GraphProcessor({weight, nodenames, path}) {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const visJsRef = useRef(null);\n  console.log(\"path\");\n  console.log(path);\n  useEffect(() => {\n    if (weight && nodenames) {\n      const newNodes = [];\n      const newEdges = [];\n      console.log(weight.length);\n      for(let i = 0; i < weight.length; i++){\n          newNodes.push({id: i, label: nodenames[i][0]});\n          for(let j = 0; j < weight[i].length; j++){\n              if(weight[i][j] !== 0) newEdges.push({from: i, to: j});\n          }\n      }\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [weight, nodenames]);\n\n  const getEdgeColor = (edge) => {\n    if (newRouteEdge[edge.from] && newRouteEdge[edge.from].includes(edge.to)) {\n      return '#FF0000';\n    } else {\n      return '#999999';\n    }\n  };\n  \n  useEffect(() => {\n    visJsRef.current &&\n    new Network(\n      visJsRef.current,\n      { nodes, edges },\n      {\n        edges: {\n          color: getEdgeColor\n        }\n      }\n    );\n  }, [visJsRef, nodes, edges, newRouteEdge]);\n  \n  return(<div ref={visJsRef} />);\n}\n\nexport default GraphProcessor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,OAAO,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,cAAcA,CAAAC,IAAA,EAA4B;EAAAC,EAAA;EAAA,IAA3B;IAACC,MAAM;IAAEC,SAAS;IAAEC;EAAI,CAAC,GAAAJ,IAAA;EAC/C,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMgB,QAAQ,GAAGd,MAAM,CAAC,IAAI,CAAC;EAC7Be,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EACnBD,OAAO,CAACC,GAAG,CAACP,IAAI,CAAC;EACjBV,SAAS,CAAC,MAAM;IACd,IAAIQ,MAAM,IAAIC,SAAS,EAAE;MACvB,MAAMS,QAAQ,GAAG,EAAE;MACnB,MAAMC,QAAQ,GAAG,EAAE;MACnBH,OAAO,CAACC,GAAG,CAACT,MAAM,CAACY,MAAM,CAAC;MAC1B,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,MAAM,CAACY,MAAM,EAAEC,CAAC,EAAE,EAAC;QAClCH,QAAQ,CAACI,IAAI,CAAC;UAACC,EAAE,EAAEF,CAAC;UAAEG,KAAK,EAAEf,SAAS,CAACY,CAAC,CAAC,CAAC,CAAC;QAAC,CAAC,CAAC;QAC9C,KAAI,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,MAAM,CAACa,CAAC,CAAC,CAACD,MAAM,EAAEK,CAAC,EAAE,EAAC;UACrC,IAAGjB,MAAM,CAACa,CAAC,CAAC,CAACI,CAAC,CAAC,KAAK,CAAC,EAAEN,QAAQ,CAACG,IAAI,CAAC;YAACI,IAAI,EAAEL,CAAC;YAAEM,EAAE,EAAEF;UAAC,CAAC,CAAC;QAC1D;MACJ;MACAb,QAAQ,CAACM,QAAQ,CAAC;MAClBJ,QAAQ,CAACK,QAAQ,CAAC;IACpB;EACF,CAAC,EAAE,CAACX,MAAM,EAAEC,SAAS,CAAC,CAAC;EAEvB,MAAMmB,YAAY,GAAIC,IAAI,IAAK;IAC7B,IAAIC,YAAY,CAACD,IAAI,CAACH,IAAI,CAAC,IAAII,YAAY,CAACD,IAAI,CAACH,IAAI,CAAC,CAACK,QAAQ,CAACF,IAAI,CAACF,EAAE,CAAC,EAAE;MACxE,OAAO,SAAS;IAClB,CAAC,MAAM;MACL,OAAO,SAAS;IAClB;EACF,CAAC;EAED3B,SAAS,CAAC,MAAM;IACde,QAAQ,CAACiB,OAAO,IAChB,IAAI9B,OAAO,CACTa,QAAQ,CAACiB,OAAO,EAChB;MAAErB,KAAK;MAAEE;IAAM,CAAC,EAChB;MACEA,KAAK,EAAE;QACLoB,KAAK,EAAEL;MACT;IACF,CAAC,CACF;EACH,CAAC,EAAE,CAACb,QAAQ,EAAEJ,KAAK,EAAEE,KAAK,EAAEiB,YAAY,CAAC,CAAC;EAE1C,oBAAO1B,OAAA;IAAK8B,GAAG,EAAEnB;EAAS;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AAC/B;AAAC/B,EAAA,CA5CQF,cAAc;AAAAkC,EAAA,GAAdlC,cAAc;AA8CvB,eAAeA,cAAc;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}