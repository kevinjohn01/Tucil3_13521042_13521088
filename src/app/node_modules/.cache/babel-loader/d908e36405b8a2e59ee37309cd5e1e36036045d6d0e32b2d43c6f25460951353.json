{"ast":null,"code":"var _jsxFileName = \"/Users/putinabillaaidira/Downloads/KULIAH/Semester 4/STIMA/Tucil3_13521042_13521088/src/app/src/GraphProcessor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GraphProcessor(_ref) {\n  _s();\n  let {\n    weight,\n    nodenames,\n    path\n  } = _ref;\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const visJsRef = useRef(null);\n  console.log(\"path\");\n  console.log(path);\n  useEffect(() => {\n    if (weight && nodenames) {\n      const newNodes = [];\n      const newEdges = [];\n      console.log(weight.length);\n      for (let i = 0; i < weight.length; i++) {\n        newNodes.push({\n          id: i,\n          label: nodenames[i][0]\n        });\n        for (let j = 0; j < weight[i].length; j++) {\n          if (weight[i][j] !== 0) newEdges.push({\n            from: i,\n            to: j\n          });\n        }\n      }\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [weight, nodenames]);\n  useEffect(() => {\n    let newRouteEdge = [];\n    if (path != null) {\n      for (let i = 0; i < path.length - 1; i++) {\n        if (newRouteEdge[path[i]] === undefined) {\n          newRouteEdge[path[i]] = [path[i + 1]];\n        } else {\n          newRouteEdge[path[i]].push(path[i + 1]);\n        }\n        console.log(\"newRouteEdge[path[i]]\");\n        console.log(newRouteEdge[path[i]]);\n      }\n    }\n    function getEdgeColor(edges, newRouteEdge) {\n      // console.log(\"newRouteEdge[edges.from]\");\n      // console.log(newRouteEdge[edges.from]);\n      if (newRouteEdge && newRouteEdge[edges.from].includes(edges.to)) {\n        return \"#000000\";\n      } else {\n        return \"#FF0000\";\n      }\n    }\n    ;\n    const network = new Network(visJsRef.current, {\n      nodes,\n      edges\n    }, {\n      autoResize: true,\n      edges: {\n        color: getEdgeColor(edges)\n      }\n    });\n    return () => {\n      network.destroy();\n    };\n  }, [visJsRef, nodes, edges, path]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: visJsRef,\n    className: \"graph\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n}\n_s(GraphProcessor, \"Wst6RXIqRek9kqLwMYJBAV8VmNo=\");\n_c = GraphProcessor;\nexport default GraphProcessor;\nvar _c;\n$RefreshReg$(_c, \"GraphProcessor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Network","jsxDEV","_jsxDEV","GraphProcessor","_ref","_s","weight","nodenames","path","nodes","setNodes","edges","setEdges","visJsRef","console","log","newNodes","newEdges","length","i","push","id","label","j","from","to","newRouteEdge","undefined","getEdgeColor","includes","network","current","autoResize","color","destroy","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/putinabillaaidira/Downloads/KULIAH/Semester 4/STIMA/Tucil3_13521042_13521088/src/app/src/GraphProcessor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\nimport \"./App.css\";\n\nfunction GraphProcessor({weight, nodenames, path}) {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const visJsRef = useRef(null);\n  console.log(\"path\");\n  console.log(path);\n  useEffect(() => {\n    if (weight && nodenames) {\n      const newNodes = [];\n      const newEdges = [];\n      console.log(weight.length);\n      for(let i = 0; i < weight.length; i++){\n          newNodes.push({id: i, label: nodenames[i][0]});\n          for(let j = 0; j < weight[i].length; j++){\n              if(weight[i][j] !== 0) newEdges.push({from: i, to: j});\n          }\n      }\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [weight, nodenames]);\n  \n  useEffect(() => {\n    let newRouteEdge = [];\n    if(path != null){\n      for(let i = 0; i < path.length - 1; i++){\n        if(newRouteEdge[path[i]] === undefined) {\n          newRouteEdge[path[i]] = [path[i + 1]];\n        } else {\n          newRouteEdge[path[i]].push(path[i + 1])\n        }\n        console.log(\"newRouteEdge[path[i]]\");\n        console.log(newRouteEdge[path[i]]);\n      }\n    }\n    function getEdgeColor(edges, newRouteEdge){\n      // console.log(\"newRouteEdge[edges.from]\");\n      // console.log(newRouteEdge[edges.from]);\n      if (newRouteEdge && newRouteEdge[edges.from].includes(edges.to)) {\n        return \"#000000\";\n      } else {\n        return \"#FF0000\";\n      }\n    };\n    \n    const network = new Network(\n      visJsRef.current,\n      { nodes, edges },\n      {\n        autoResize: true,\n        edges: {\n          color: getEdgeColor(edges)\n        }\n      }\n    );\n\n    return () => {\n      network.destroy();\n    };\n  }, [visJsRef, nodes, edges, path]);\n  \n  return(<div ref={visJsRef} className=\"graph\"/>);\n}\n\nexport default GraphProcessor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}