{"ast":null,"code":"var _jsxFileName = \"/Users/putinabillaaidira/Downloads/KULIAH/Semester 4/STIMA/Tucil3_13521042_13521088/src/app/src/GraphProcessor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getEdgeColor(edges, newRouteEdge) {\n  return newRouteEdge[edges.from] && newRouteEdge[edges.from].includes(edges.to) ? \"#000000\" : \"#FF0000\";\n}\nfunction GraphProcessor(_ref) {\n  _s();\n  let {\n    weight,\n    nodenames,\n    path\n  } = _ref;\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const visJsRef = useRef(null);\n  useEffect(() => {\n    let routeEdge = [];\n    if (path != null) {\n      // initialize routeEdge as an array of arrays\n      routeEdge = Array.from({\n        length: weight.length\n      }, () => []);\n      for (let i = 0; i < path.length - 1; i++) {\n        routeEdge[path[i]][path[i + 1]] = true;\n      }\n    }\n    if (weight && nodenames) {\n      const newNodes = [];\n      const newEdges = [];\n      let id = 0;\n      for (let i = 0; i < weight.length; i++) {\n        newNodes.push({\n          id: `${i}`,\n          label: nodenames[i][0]\n        });\n        for (let j = 0; j < weight[i].length; j++) {\n          if (weight[i][j] !== 0) {\n            // if(routeEdge[i][j] === true){\n            //   newEdges.push({ id: `${id}` + 'isRoute', from: i, to: j , label: weight[i][j]});\n            // }\n            // else \n            newEdges.push({\n              id: `${id}`,\n              from: i,\n              to: j,\n              label: weight[i][j]\n            });\n          }\n          id++;\n        }\n      }\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [weight, nodenames]);\n  useEffect(() => {\n    const visJsRefCurrent = visJsRef.current;\n    const network = new Network(visJsRefCurrent, {\n      nodes,\n      edges\n    }, {\n      autoResize: true,\n      edges: {\n        color: {\n          color: \"black\"\n        }\n      }\n    });\n    console.log(network);\n    // for(let i = 0; i < network.body.data.edges.length; i++){\n    //     try{network.body.data.edges.update({id: `${i}` + 'isRoute', color: {color: \"red\"}})} catch(err){};\n    // }\n    return () => {\n      network.destroy();\n    };\n  }, [nodes, edges, path]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: visJsRef,\n    className: \"graph\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 11\n  }, this);\n}\n_s(GraphProcessor, \"Wst6RXIqRek9kqLwMYJBAV8VmNo=\");\n_c = GraphProcessor;\nexport default GraphProcessor;\nvar _c;\n$RefreshReg$(_c, \"GraphProcessor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Network","jsxDEV","_jsxDEV","getEdgeColor","edges","newRouteEdge","from","includes","to","GraphProcessor","_ref","_s","weight","nodenames","path","nodes","setNodes","setEdges","visJsRef","routeEdge","Array","length","i","newNodes","newEdges","id","push","label","j","visJsRefCurrent","current","network","autoResize","color","console","log","destroy","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/putinabillaaidira/Downloads/KULIAH/Semester 4/STIMA/Tucil3_13521042_13521088/src/app/src/GraphProcessor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\nimport \"./App.css\";\n\nfunction getEdgeColor(edges, newRouteEdge) {\n  return newRouteEdge[edges.from] && newRouteEdge[edges.from].includes(edges.to) ? \"#000000\" : \"#FF0000\";\n}\n\nfunction GraphProcessor({ weight, nodenames, path }) {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const visJsRef = useRef(null);\n\n  useEffect(() => {\n    let routeEdge = [];\n    if (path != null) {\n      // initialize routeEdge as an array of arrays\n      routeEdge = Array.from({ length: weight.length }, () => []);\n      for (let i = 0; i < path.length - 1; i++) {\n        routeEdge[path[i]][path[i + 1]] = true;\n      }\n    }\n    if (weight && nodenames) {\n      const newNodes = [];\n      const newEdges = [];\n      let id = 0;\n      for (let i = 0; i < weight.length; i++) {\n        newNodes.push({ id: `${i}`, label: nodenames[i][0]});\n        for (let j = 0; j < weight[i].length; j++) {\n          if (weight[i][j] !== 0){\n            // if(routeEdge[i][j] === true){\n            //   newEdges.push({ id: `${id}` + 'isRoute', from: i, to: j , label: weight[i][j]});\n            // }\n            // else \n            newEdges.push({ id: `${id}`, from: i, to: j , label: weight[i][j]});\n          }\n          id++;\n        }\n      }\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [weight, nodenames]);\n\n  useEffect(() => {\n    const visJsRefCurrent = visJsRef.current;\n    const network = new Network(\n      visJsRefCurrent,\n      { nodes, edges },\n      {\n        autoResize: true,\n        edges: {\n          color: {\n            color: \"black\",\n          }\n        }\n      }\n    );\n    console.log(network);\n    // for(let i = 0; i < network.body.data.edges.length; i++){\n    //     try{network.body.data.edges.update({id: `${i}` + 'isRoute', color: {color: \"red\"}})} catch(err){};\n    // }\n    return () => {\n      network.destroy();\n    };\n  }, [nodes, edges, path]);\n\n  return (<div ref={visJsRef} className=\"graph\" />);\n}\n\nexport default GraphProcessor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}