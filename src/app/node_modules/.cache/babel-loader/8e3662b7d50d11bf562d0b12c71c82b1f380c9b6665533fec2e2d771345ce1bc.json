{"ast":null,"code":"var _jsxFileName = \"/Users/putinabillaaidira/Downloads/KULIAH/Semester 4/STIMA/Tucil3_13521042_13521088/src/app/src/GraphProcessor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getEdgeColor(edges, newRouteEdge) {\n  if (newRouteEdge[edges.from] && newRouteEdge[edges.from].includes(edges.to)) {\n    return \"#000000\";\n  } else {\n    return \"#FF0000\";\n  }\n}\nfunction GraphProcessor(_ref) {\n  _s();\n  let {\n    weight,\n    nodenames,\n    path\n  } = _ref;\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const visJsRef = useRef(null);\n  useEffect(() => {\n    if (weight && nodenames) {\n      const newNodes = [];\n      const newEdges = [];\n      let id = 0;\n      for (let i = 0; i < weight.length; i++) {\n        newNodes.push({\n          id: toString(i),\n          label: nodenames[i][0]\n        });\n        for (let j = 0; j < weight[i].length; j++) {\n          if (weight[i][j] !== 0) newEdges.push({\n            id: toString(id),\n            from: i,\n            to: j\n          });\n          id++;\n        }\n      }\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [weight, nodenames]);\n  useEffect(() => {\n    let newRouteEdge = [];\n    if (path != null) {\n      for (let i = 0; i < path.length - 1; i++) {\n        if (newRouteEdge[path[i]] === undefined) {\n          newRouteEdge[path[i]] = [path[i + 1]];\n        } else {\n          newRouteEdge[path[i]].push(path[i + 1]);\n        }\n      }\n    }\n    // const getEdgeColor = (edge) => {\n    //   if (newRouteEdge[edge.from] && newRouteEdge[edge.from].includes(edge.to)) ? \"#000000\" : \"#FF0000\";\n    // };\n    const network = new Network(visJsRef.current, {\n      nodes,\n      edges\n    }, {\n      autoResize: true,\n      edges: {\n        color: \"#000\"\n      }\n    });\n    console.log(nodes);\n    // network.nodes\n    network.selectEdges([\"1\"], true);\n    return () => {\n      network.destroy();\n    };\n  }, [visJsRef, nodes, edges, path]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: visJsRef,\n    className: \"graph\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 10\n  }, this);\n}\n_s(GraphProcessor, \"Wst6RXIqRek9kqLwMYJBAV8VmNo=\");\n_c = GraphProcessor;\nexport default GraphProcessor;\nvar _c;\n$RefreshReg$(_c, \"GraphProcessor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Network","jsxDEV","_jsxDEV","getEdgeColor","edges","newRouteEdge","from","includes","to","GraphProcessor","_ref","_s","weight","nodenames","path","nodes","setNodes","setEdges","visJsRef","newNodes","newEdges","id","i","length","push","toString","label","j","undefined","network","current","autoResize","color","console","log","selectEdges","destroy","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/putinabillaaidira/Downloads/KULIAH/Semester 4/STIMA/Tucil3_13521042_13521088/src/app/src/GraphProcessor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\nimport \"./App.css\";\n\nfunction getEdgeColor(edges, newRouteEdge) {\n  if (newRouteEdge[edges.from] && newRouteEdge[edges.from].includes(edges.to)) {\n    return \"#000000\";\n  } else {\n    return \"#FF0000\";\n  }\n}\n\nfunction GraphProcessor({weight, nodenames, path}) {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const visJsRef = useRef(null);\n\n  useEffect(() => {\n    if (weight && nodenames) {\n      const newNodes = [];\n      const newEdges = [];\n      let id = 0;\n      for(let i = 0; i < weight.length; i++){\n          newNodes.push({id: toString(i), label: nodenames[i][0]});\n          for(let j = 0; j < weight[i].length; j++){\n              if(weight[i][j] !== 0) newEdges.push({id: toString(id), from: i, to: j});\n              id++;\n          }\n      }\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [weight, nodenames]);\n\n  useEffect(() => {\n    let newRouteEdge = [];\n    if(path != null){\n      for(let i = 0; i < path.length - 1; i++){\n        if(newRouteEdge[path[i]] === undefined) {\n          newRouteEdge[path[i]] = [path[i + 1]];\n        } else {\n          newRouteEdge[path[i]].push(path[i + 1])\n        }\n      }\n    }\n    // const getEdgeColor = (edge) => {\n    //   if (newRouteEdge[edge.from] && newRouteEdge[edge.from].includes(edge.to)) ? \"#000000\" : \"#FF0000\";\n    // };\n    const network = new Network(\n      visJsRef.current,\n      { nodes, edges },\n      {\n        autoResize: true,\n        edges: {\n          color: \"#000\"\n        }\n      }\n    );\n    console.log(nodes);\n    // network.nodes\n    network.selectEdges([\"1\"], true);\n    return () => {\n      network.destroy();\n    };\n  }, [visJsRef, nodes, edges, path]);\n\n  return(<div ref={visJsRef} className=\"graph\"/>);\n}\n\nexport default GraphProcessor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}