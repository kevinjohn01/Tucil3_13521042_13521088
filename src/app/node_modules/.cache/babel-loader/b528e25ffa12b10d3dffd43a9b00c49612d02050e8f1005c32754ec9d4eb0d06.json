{"ast":null,"code":"var _jsxFileName = \"/Users/putinabillaaidira/Downloads/KULIAH/Semester 4/STIMA/Tucil3_13521042_13521088/src/app/src/GraphProcessor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GraphProcessor(_ref) {\n  _s();\n  let {\n    weight,\n    nodenames,\n    path\n  } = _ref;\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [routeEdge, setRouteEdges] = useState([]);\n  // console.log(weight);\n  // console.log(nodenames);\n  useEffect(() => {\n    if (weight && nodenames) {\n      // console.log(\"weight:\");\n      // console.log(weight);\n      const newNodes = [];\n      const newEdges = [];\n      console.log(weight.length);\n      for (let i = 0; i < weight.length; i++) {\n        newNodes.push({\n          id: i,\n          label: nodenames[i][0]\n        });\n        // console.log(\"newNodes\");\n        for (let j = 0; j < weight[i].length; j++) {\n          if (weight[i][j] !== 0) newEdges.push({\n            from: i,\n            to: j\n          });\n          // console.log(newEdges);\n          id++;\n        }\n      }\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [weight, nodenames]);\n  newRouteEdge = [];\n  if (path != null) {\n    for (let i = 0; i < path.length - 1; i++) {\n      newRouteEdge[path[i]].push(path[i + 1]);\n    }\n  }\n  setRouteEdges(newRouteEdge);\n  const visJsRef = useRef(null);\n  // console.log(nodes);\n  // console.log(edges);\n  useEffect(() => {\n    visJsRef.current && new Network(visJsRef.current, {\n      nodes,\n      edges\n    }, {\n      // autoResize: true,\n      edges: {\n        color: {\n          color: edge => {\n            return routeEdge[edge.from].includes(edge.to) ? '#FF0000' : '#999999';\n          }\n        }\n      }\n    });\n  }, [visJsRef, nodes, edges, routeEdge]);\n  // useEffect(() => {\n  //   const newEdges = edges.map((edge) => {\n  //     if ((edge.from === 1 && edge.to === 2) || (edge.from === 0 && edge.to === 1)) {\n  //       return { ...edge, color: \"red\" };\n  //     }\n  //     return edge;\n  //   });\n\n  //   const network = new Network(\n  //     visJsRef.current,\n  //     { nodes, edges: newEdges },\n  //     {\n  //       edges: {\n  //         color: \"#000000\",\n  //         width: 1\n  //       }\n  //     }\n  //   );\n\n  //   return () => {\n  //     network.destroy();\n  //   };\n  // }, [visJsRef, nodes, edges]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: visJsRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 10\n  }, this);\n}\n_s(GraphProcessor, \"BeP+dxAf74bSjieVhamlR80CCHY=\");\n_c = GraphProcessor;\nexport default GraphProcessor;\nvar _c;\n$RefreshReg$(_c, \"GraphProcessor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Network","jsxDEV","_jsxDEV","GraphProcessor","_ref","_s","weight","nodenames","path","nodes","setNodes","edges","setEdges","routeEdge","setRouteEdges","newNodes","newEdges","console","log","length","i","push","id","label","j","from","to","newRouteEdge","visJsRef","current","color","edge","includes","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/putinabillaaidira/Downloads/KULIAH/Semester 4/STIMA/Tucil3_13521042_13521088/src/app/src/GraphProcessor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\n\nfunction GraphProcessor({weight, nodenames, path}) {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [routeEdge, setRouteEdges] = useState([]);\n  // console.log(weight);\n  // console.log(nodenames);\n  useEffect(() => {\n    if (weight && nodenames) {\n      // console.log(\"weight:\");\n      // console.log(weight);\n      const newNodes = [];\n      const newEdges = [];\n      console.log(weight.length);\n      for(let i = 0; i < weight.length; i++){\n          newNodes.push({id: i, label: nodenames[i][0]});\n          // console.log(\"newNodes\");\n          for(let j = 0; j < weight[i].length; j++){\n              if(weight[i][j] !== 0) newEdges.push({from: i, to: j});\n              // console.log(newEdges);\n              id++;\n          }\n      }\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [weight, nodenames]);\n  newRouteEdge = [];\n  if(path != null){\n    for(let i = 0; i < path.length - 1; i++){\n      newRouteEdge[path[i]].push(path[i + 1])\n    }\n  }\n  setRouteEdges(newRouteEdge);\n  const visJsRef = useRef(null);\n  // console.log(nodes);\n  // console.log(edges);\n  useEffect(() => {\n      visJsRef.current &&\n      new Network(\n        visJsRef.current,\n        { nodes, edges },\n        {\n          // autoResize: true,\n          edges: {\n            color: {\n              color: edge => {\n                return routeEdge[edge.from].includes(edge.to) ? '#FF0000' : '#999999';\n              }\n            }\n          }\n        }\n      );\n  }, [visJsRef, nodes, edges, routeEdge]);\n  // useEffect(() => {\n  //   const newEdges = edges.map((edge) => {\n  //     if ((edge.from === 1 && edge.to === 2) || (edge.from === 0 && edge.to === 1)) {\n  //       return { ...edge, color: \"red\" };\n  //     }\n  //     return edge;\n  //   });\n    \n  //   const network = new Network(\n  //     visJsRef.current,\n  //     { nodes, edges: newEdges },\n  //     {\n  //       edges: {\n  //         color: \"#000000\",\n  //         width: 1\n  //       }\n  //     }\n  //   );\n  \n  //   return () => {\n  //     network.destroy();\n  //   };\n  // }, [visJsRef, nodes, edges]);\n  \n  return(<div ref={visJsRef} />);\n}\n\nexport default GraphProcessor;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}