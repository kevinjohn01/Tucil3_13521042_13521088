{"ast":null,"code":"function FileProcessor(fileContent) {\n  const lines = fileContent.split('\\n');\n  let weightstr = [];\n  let weight = [];\n  let nodenames = [];\n  let nodecoor = [];\n  console.log(lines[0]);\n  const nodenums = parseInt(lines[0]);\n  let j = 0;\n  for (let i = 1; i <= nodenums; i++) {\n    let splitnodecoor = lines[i].split(\" : \");\n    nodenames[j] = [splitnodecoor[0]];\n    nodecoor[j] = parseFloat(splitnodecoor[1].split(\",\"));\n    j++;\n  }\n  let k = 0;\n  for (let i = nodenums + 1; i <= 2 * nodenums; i++) {\n    weightstr[k] = lines[i].split(\" \");\n    k++;\n  }\n  // console.log(weight[1]);\n  // console.log(i);\n  for (let i = 0; i < nodenums; i++) {\n    weight.push([]);\n    for (let j = 0; j < nodenums; j++) {\n      weight[i][j] = parseFloat(weightstr[i][j]);\n      console.log(weightstr[i][j]);\n    }\n  }\n  console.log(\"w:\");\n  console.log(weight);\n  console.log(nodenames);\n  console.log(nodecoor);\n  return {\n    weight,\n    nodenames,\n    nodecoor\n  };\n}\n_c = FileProcessor;\nexport default FileProcessor;\nvar _c;\n$RefreshReg$(_c, \"FileProcessor\");","map":{"version":3,"names":["FileProcessor","fileContent","lines","split","weightstr","weight","nodenames","nodecoor","console","log","nodenums","parseInt","j","i","splitnodecoor","parseFloat","k","push","_c","$RefreshReg$"],"sources":["/Users/putinabillaaidira/Downloads/KULIAH/Semester 4/STIMA/Tucil3_13521042_13521088/src/app/src/FileProcessor.js"],"sourcesContent":["function FileProcessor(fileContent){\n    const lines = fileContent.split('\\n');\n    let weightstr = [];\n    let weight = [];\n    let nodenames = [];\n    let nodecoor = [];\n    console.log(lines[0]);\n    const nodenums = parseInt(lines[0]);\n    let j = 0;\n    for (let i = 1; i <= nodenums; i++){\n        let splitnodecoor = lines[i].split(\" : \");\n        nodenames[j] = [splitnodecoor[0]];\n        nodecoor[j] = parseFloat(splitnodecoor[1].split(\",\"));\n        j++;\n    }\n    let k = 0;\n    for (let i = nodenums + 1; i <= 2 * nodenums; i++){\n        weightstr[k] = lines[i].split(\" \");\n        k++;\n    }\n    // console.log(weight[1]);\n    // console.log(i);\n    for (let i = 0; i < nodenums; i++){\n        weight.push([]);\n        for(let j = 0; j < nodenums; j++){\n            weight[i][j] = parseFloat(weightstr[i][j]);\n            console.log(weightstr[i][j])\n        }\n    }\n    console.log(\"w:\")\n    console.log(weight);\n    console.log(nodenames);\n    console.log(nodecoor);\n    return ({weight, nodenames, nodecoor});\n}\nexport default FileProcessor;"],"mappings":"AAAA,SAASA,aAAaA,CAACC,WAAW,EAAC;EAC/B,MAAMC,KAAK,GAAGD,WAAW,CAACE,KAAK,CAAC,IAAI,CAAC;EACrC,IAAIC,SAAS,GAAG,EAAE;EAClB,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,SAAS,GAAG,EAAE;EAClB,IAAIC,QAAQ,GAAG,EAAE;EACjBC,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC,CAAC,CAAC,CAAC;EACrB,MAAMQ,QAAQ,GAAGC,QAAQ,CAACT,KAAK,CAAC,CAAC,CAAC,CAAC;EACnC,IAAIU,CAAC,GAAG,CAAC;EACT,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,QAAQ,EAAEG,CAAC,EAAE,EAAC;IAC/B,IAAIC,aAAa,GAAGZ,KAAK,CAACW,CAAC,CAAC,CAACV,KAAK,CAAC,KAAK,CAAC;IACzCG,SAAS,CAACM,CAAC,CAAC,GAAG,CAACE,aAAa,CAAC,CAAC,CAAC,CAAC;IACjCP,QAAQ,CAACK,CAAC,CAAC,GAAGG,UAAU,CAACD,aAAa,CAAC,CAAC,CAAC,CAACX,KAAK,CAAC,GAAG,CAAC,CAAC;IACrDS,CAAC,EAAE;EACP;EACA,IAAII,CAAC,GAAG,CAAC;EACT,KAAK,IAAIH,CAAC,GAAGH,QAAQ,GAAG,CAAC,EAAEG,CAAC,IAAI,CAAC,GAAGH,QAAQ,EAAEG,CAAC,EAAE,EAAC;IAC9CT,SAAS,CAACY,CAAC,CAAC,GAAGd,KAAK,CAACW,CAAC,CAAC,CAACV,KAAK,CAAC,GAAG,CAAC;IAClCa,CAAC,EAAE;EACP;EACA;EACA;EACA,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,EAAEG,CAAC,EAAE,EAAC;IAC9BR,MAAM,CAACY,IAAI,CAAC,EAAE,CAAC;IACf,KAAI,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAC;MAC7BP,MAAM,CAACQ,CAAC,CAAC,CAACD,CAAC,CAAC,GAAGG,UAAU,CAACX,SAAS,CAACS,CAAC,CAAC,CAACD,CAAC,CAAC,CAAC;MAC1CJ,OAAO,CAACC,GAAG,CAACL,SAAS,CAACS,CAAC,CAAC,CAACD,CAAC,CAAC,CAAC;IAChC;EACJ;EACAJ,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;EACjBD,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;EACnBG,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC;EACtBE,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;EACrB,OAAQ;IAACF,MAAM;IAAEC,SAAS;IAAEC;EAAQ,CAAC;AACzC;AAACW,EAAA,GAlCQlB,aAAa;AAmCtB,eAAeA,aAAa;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}